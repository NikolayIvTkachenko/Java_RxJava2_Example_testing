import io.reactivex.subjects.ReplaySubject;

public class AppDemoRxJava005_ReplaySubject {


    public static void main(String[] args) {

        /*
        https://habr.com/ru/post/270023/
        ReplaySubject имеет специальную возможность кэшировать все поступившие в него данные.
        Когда у него появляется новый подписчик, последовательность
        выдана ему начиная с начала. Все последующие поступившие данные будут выдаваться подписчикам как обычно.

        Все значения были получены, не смотря на то, что один из подписчиков подписался позже другого.
        Обратите внимание, что до того как получить новое значение, подписчик получает все пропущенные.
        Таким образом, порядок последовательности для подписчика не нарушен.

        Кэшировать всё подряд не всегда лучшая идея, так как последовательности могут быть длинными или даже бесконечными.
        Фабричный метод ReplaySubject.createWithSize ограничивает размер буфера,
        а ReplaySubject.createWithTime время, которое объекты будут оставаться в кеше.

        Наш подписчик на этот раз пропустил первое значение, которое выпало из буфера размером
        2. Таким же образом со временем из буфера выпадают объекты у
        Subject созданного при помощи createWithTime.

         */

        ReplaySubject<Integer> s = ReplaySubject.create();
        s.subscribe(v -> System.out.println("Early:" + v));
        s.onNext(0);
        s.onNext(1);
        s.subscribe(v -> System.out.println("Late: " + v));
        s.onNext(2);


    }
}
